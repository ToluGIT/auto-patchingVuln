terraform {
  required_version = ">= 1.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Data sources
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# DynamoDB table for state management
resource "aws_dynamodb_table" "patch_execution_state" {
  name           = "PatchExecutionState"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "instance_id"
  
  attribute {
    name = "instance_id"
    type = "S"
  }
  
  ttl {
    attribute_name = "expiration_time"
    enabled        = true
  }
  
  point_in_time_recovery {
    enabled = true
  }
  
  tags = {
    Name        = "PatchExecutionState"
    Environment = var.environment
  }
}

# SNS Topic for notifications
resource "aws_sns_topic" "patch_notifications" {
  name = "patch-automation-notifications"
  
  tags = {
    Name        = "PatchAutomationNotifications"
    Environment = var.environment
  }
}

resource "aws_sns_topic_subscription" "patch_notifications_email" {
  topic_arn = aws_sns_topic.patch_notifications.arn
  protocol  = "email"
  endpoint  = var.notification_email
}

# IAM Role for Lambda
resource "aws_iam_role" "lambda_execution_role" {
  name               = "PatchDeduplicationLambdaRole"
  assume_role_policy = file("${path.module}/policies/lambda-assume-role.json")
  
  tags = {
    Name        = "PatchDeduplicationLambdaRole"
    Environment = var.environment
  }
}

resource "aws_iam_role_policy" "lambda_execution_policy" {
  name   = "PatchDeduplicationLambdaPolicy"
  role   = aws_iam_role.lambda_execution_role.id
  policy = file("${path.module}/policies/lambda-execution-policy.json")
}

# IAM Role for SSM Automation
resource "aws_iam_role" "automation_execution_role" {
  name               = "ImprovedAutomationRole"
  assume_role_policy = file("${path.module}/policies/automation-assume-role.json")
  
  tags = {
    Name        = "ImprovedAutomationRole"
    Environment = var.environment
  }
}

resource "aws_iam_role_policy_attachment" "automation_ssm_policy" {
  role       = aws_iam_role.automation_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
}

resource "aws_iam_role_policy" "automation_additional_policy" {
  name   = "AutomationAdditionalPolicy"
  role   = aws_iam_role.automation_execution_role.id
  policy = file("${path.module}/policies/automation-execution-policy.json")
}

# Lambda function package
data "archive_file" "lambda_package" {
  type        = "zip"
  source_file = "${path.module}/../lambda/patch_deduplication.py"
  output_path = "${path.module}/lambda_package.zip"
}

# Lambda function
resource "aws_lambda_function" "patch_deduplication" {
  filename         = data.archive_file.lambda_package.output_path
  function_name    = "patch-deduplication-function"
  role            = aws_iam_role.lambda_execution_role.arn
  handler         = "patch_deduplication.lambda_handler"
  source_code_hash = data.archive_file.lambda_package.output_base64sha256
  runtime         = "python3.9"
  timeout         = 300
  memory_size     = 512
  
  environment {
    variables = {
      STATE_TABLE_NAME         = aws_dynamodb_table.patch_execution_state.name
      SNS_TOPIC_ARN           = aws_sns_topic.patch_notifications.arn
      AUTOMATION_DOCUMENT_NAME = aws_ssm_document.improved_patch_automation.name
      AUTOMATION_ROLE_ARN     = aws_iam_role.automation_execution_role.arn
      MAINTENANCE_WINDOW_START = var.maintenance_window_start
      MAINTENANCE_WINDOW_END   = var.maintenance_window_end
    }
  }
  
  tags = {
    Name        = "PatchDeduplicationFunction"
    Environment = var.environment
  }
}

# CloudWatch Log Group for Lambda
resource "aws_cloudwatch_log_group" "lambda_logs" {
  name              = "/aws/lambda/${aws_lambda_function.patch_deduplication.function_name}"
  retention_in_days = 7
  
  tags = {
    Name        = "PatchDeduplicationLogs"
    Environment = var.environment
  }
}

# SSM Document
resource "aws_ssm_document" "improved_patch_automation" {
  name            = "ImprovedPatchAutomation"
  document_type   = "Automation"
  document_format = "YAML"
  content         = file("${path.module}/../documents/improved-patch-automation.yaml")
  
  tags = {
    Name        = "ImprovedPatchAutomation"
    Environment = var.environment
  }
}

# EventBridge Rule for Inspector findings
resource "aws_cloudwatch_event_rule" "inspector_findings" {
  name        = "inspector-vulnerability-findings"
  description = "Trigger on high and critical Inspector findings"
  
  event_pattern = jsonencode({
    source      = ["aws.inspector2"]
    detail-type = ["Inspector2 Finding"]
    detail = {
      severity = ["HIGH", "CRITICAL"]
      status   = ["ACTIVE"]
      type     = ["PACKAGE_VULNERABILITY"]
    }
  })
  
  tags = {
    Name        = "InspectorFindingsRule"
    Environment = var.environment
  }
}

# EventBridge Target
resource "aws_cloudwatch_event_target" "lambda_target" {
  rule      = aws_cloudwatch_event_rule.inspector_findings.name
  target_id = "PatchDeduplicationLambda"
  arn       = aws_lambda_function.patch_deduplication.arn
}

# Lambda permission for EventBridge
resource "aws_lambda_permission" "eventbridge_invoke" {
  statement_id  = "AllowEventBridgeInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.patch_deduplication.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.inspector_findings.arn
}

# CloudWatch Log Group for SSM
resource "aws_cloudwatch_log_group" "ssm_patch_logs" {
  name              = "/aws/ssm/patch-automation"
  retention_in_days = 30
  
  tags = {
    Name        = "SSMPatchLogs"
    Environment = var.environment
  }
}

# Inspector enabler
resource "aws_inspector2_enabler" "main" {
  account_ids    = [data.aws_caller_identity.current.account_id]
  resource_types = ["EC2", "ECR"]
}

# IAM role for EC2 instances (for SSM)
resource "aws_iam_role" "ec2_ssm_role" {
  name = "EC2-SSM-Role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
  
  tags = {
    Name        = "EC2SSMRole"
    Environment = var.environment
  }
}

resource "aws_iam_role_policy_attachment" "ec2_ssm_policy" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ec2_ssm_profile" {
  name = "EC2-SSM-Profile"
  role = aws_iam_role.ec2_ssm_role.name
}

# CloudWatch Dashboard
resource "aws_cloudwatch_dashboard" "patch_monitoring" {
  dashboard_name = "patch-automation-monitoring"
  
  dashboard_body = jsonencode({
    widgets = [
      {
        type   = "metric"
        x      = 0
        y      = 0
        width  = 12
        height = 6
        
        properties = {
          metrics = [
            ["AWS/Lambda", "Invocations", { stat = "Sum", label = "Total Invocations" }],
            [".", "Errors", { stat = "Sum", label = "Errors" }],
            [".", "Duration", { stat = "Average", label = "Avg Duration" }]
          ]
          view    = "timeSeries"
          stacked = false
          region  = var.aws_region
          title   = "Lambda Function Metrics"
          period  = 300
        }
      },
      {
        type   = "log"
        x      = 12
        y      = 0
        width  = 12
        height = 6
        
        properties = {
          query   = <<-EOT
            SOURCE '/aws/lambda/patch-deduplication-function'
            | fields @timestamp, @message
            | filter @message like /ERROR/
            | sort @timestamp desc
            | limit 20
          EOT
          region  = var.aws_region
          title   = "Recent Errors"
        }
      }
    ]
  })
}